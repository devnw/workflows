name: Lint, Build & Test

on:
  workflow_call:

env:
  GOPRIVATE: go.devnw.com,go.diver.dev,go.atomizer.io,go.secteria.com,go.structs.dev
  GH_ACCESS_TOKEN: ${{ secrets.GH_PAT }}

jobs:
  lint:
    name: "Lint"
    runs-on: ubuntu-latest
    steps:
      - uses: de-vri-es/setup-git-credentials@v2
        with:
          credentials: ${{secrets.GIT_CREDENTIALS}}

      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ vars.GO_VERSION }}

      - name: Pre-commit hooks
        uses: pre-commit/action@v3.0.0
  build:
    name: "Build"
    needs: [lint]
    strategy:
      matrix:
        platform: [ubuntu-latest, macos-latest, windows-latest]
      fail-fast: true
    runs-on: ${{ matrix.platform }}
    steps:
      - uses: de-vri-es/setup-git-credentials@v2
        with:
          credentials: ${{secrets.GIT_CREDENTIALS}}
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Install Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ vars.GO_VERSION }}
      - name: Execute Generate Commands
        run: go generate ./...
      - name: Build
        run: go build ./...
      - name: Test
        run: go test -failfast ./... -race -coverprofile=coverage.txt -covermode=atomic
      - name: Push Coverage to codecov.io
        uses: codecov/codecov-action@v3.1.1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./coverage.txt
  fuzz-test:
    name: Fuzz test
    runs-on: ubuntu-latest
    steps:
      - uses: de-vri-es/setup-git-credentials@v2
        with:
          credentials: ${{secrets.GIT_CREDENTIALS}}
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Install Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ vars.GO_VERSION }}
      - name: Fuzz All The Things
        run: |
          curl -o- https://raw.githubusercontent.com/devnw/workflows/main/fuzz.sh | bash
          exit 0 # Fuzzing is not a test, so we don't want to fail the build
      - name: Upload Fuzz Results
        uses: actions/upload-artifact@v3
        with:
          name: fuzz-results
          path: testdata/fuzz
  pre-release:
    name: "Pre Release"
    if: github.ref == 'refs/heads/main'
    runs-on: "ubuntu-latest"
    needs: [lint,build,fuzz-test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - uses: "marvinpinto/action-automatic-releases@latest"
        with:
          repo_token: "${{ secrets.GITHUB_TOKEN }}"
          automatic_release_tag: "dev"
          prerelease: true
          title: "Development Build"
          files: |
            LICENSE
